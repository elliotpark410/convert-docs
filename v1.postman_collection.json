{
	"info": {
		"_postman_id": "4cabdd1e-2f4e-4dee-9344-2b4654d242f0",
		"name": "v1",
		"description": "TESTING SUCESS V2 Welcome to Garuda Stablecoin API Docs.\nThis document is for internal use only. You are prohibited from sharing all contents of this documents to any external third party without Elbert's / Dendi's permission.\n\nAll endpoints return either a JSON object or array regardless of success / error response.\n\nNote: All request headers `x-mock-*` are postman related. Please disregard this headers in your code.\n\nThis API docs is still a draft. Thus, if you spot any mistake, typo, or just something what wouldn't make sense, let me (Elbert) know. Example of things that doesn't make sense:\n1. Double slash in endpoint.\n2. Different parameter name between request body and `parameters` table.\n3. Inconsistencies (e.g. variable or parameter name), typo, etc.\n\n\n# Notes on GET request\n\n#### Sorting\nUser can sort by adding _get paramaters_ such as `/pool/unstake/my?sort_by=date_created` for sorting by date created ascending wise and `/pool/unstake/my?sort_by=-date_created` for descending. Every field returned by the API can be sorted.\n\n#### Filtering\nUser can filter their request by adding _get parameters_ such as `/pool/unstake/my?status=APPROVED`.\n\n#### Paging\nUser can request which page to return, by adding _page_ in _get parameters_, such as `/pool/unstake/my?page=1`.\n\n# Notes on `amount` and `ui_amount`\nWhen sending amount to any APIs, client can either send `ui_amount` or `amount`. The difference is, `amount` should factor in all 9 decimals in GIDR. For example, if you want to transfer 1000 GIDR, you should stated the amount as `1000000000000` (twelve zeroes). Or, to make it easier, you could set `ui_amount` to 1000. It is the same thing.\n\nHowever, you MUST NEVER SEND DECIMAL with `ui_amount`. The conversion will not be accurate to to float precision point. For example, sending\n\n```json\n{\n  \"ui_amount\": 9223372036.854775807\n}\n```\n\nwill return the following:\n```json\n{\n    \"amount\": \"9223372036854779904\",\n    \"ui_amount\": \"9223372036.85478\"\n}\n```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23057421"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Register retail",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"password\": \"my_secret_pass\",\n    \"password_confirmation\": \"my_secret_pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register/retail",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register",
										"retail"
									]
								},
								"description": "Register the user.\n\n#### Parameters\nParameter | Required | Type | Value | Description |\n--------- | -------- | ---- | ----- | ----------- |\nphone_number | true | string | +62818151010 | Telephone number |\npassword | true | string | my_secret_pass | SHA256 hashed password. |\npassword_confirmation | true | string | my_secret_pass | SHA256 hashed password. |\nreferral_code | false | string | 65e60076-9b6a-43ec-83cc-5aecaf99dbe2 | UUID string |"
							},
							"response": [
								{
									"name": "register retail success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"password\": \"my_secret_pass\",\n    \"password_confirmation\": \"my_secret_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://00ebe5df-a91b-4c2f-8e25-963aa902d6d1.mock.pstmn.io/auth/register/retail",
											"protocol": "https",
											"host": [
												"00ebe5df-a91b-4c2f-8e25-963aa902d6d1",
												"mock",
												"pstmn",
												"io"
											],
											"path": [
												"auth",
												"register",
												"retail"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"uuid\": \"cb8761f1-9011-4d6a-a45a-ed9c64f59bf0\",\n    \"phone_number\": \"+62818151010\",\n    \"wallet\": \"8GmHzaNXivwa66AutXbDPNoQoTwniBHLFPSZ18mDWWHy\"\n}"
								},
								{
									"name": "register retail error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510161\",\n    \"password\": \"my_secret_pass\",\n    \"password_confirmation\": \"my_secret_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/register/retail",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"register",
												"retail"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"We have existing user with phone number. Use 'Forgot password' to recover your account.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								}
							]
						},
						{
							"name": "Register institutional",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"legal_institution_name\": \"PT Jagadraya Jaring Tersebar\",\n    \"registration_country\": \"ID\",\n    \"password\": \"my_secret_pass\",\n    \"password_confirmation\": \"my_secret_pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register/institutional",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register",
										"institutional"
									]
								},
								"description": "Register user with institutional information.\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| phone_number | true | string | +62818151010 | Telephone number |\n| password | true | string | my_secret_pass | SHA256 hashed password. |\n| password_confirmation | true | string | my_secret_pass | SHA256 hashed password. |\n| legal_institution_name | true | string | PT Jagadraya Jaring Tersebar | Institution legal official name. |\n| registration_country | true | string | ID | ISO 3166-1 alpha 2-code. |\n| referral_code | false | string | 65e60076-9b6a-43ec-83cc-5aecaf99dbe2 | UUID string |"
							},
							"response": [
								{
									"name": "register institutional success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"legal_institution_name\": \"PT Jagadraya Jaring Tersebar\",\n    \"registration_country\": \"ID\",\n    \"password\": \"my_secret_pass\",\n    \"password_confirmation\": \"my_secret_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://00ebe5df-a91b-4c2f-8e25-963aa902d6d1.mock.pstmn.io/auth/register/institutional",
											"protocol": "https",
											"host": [
												"00ebe5df-a91b-4c2f-8e25-963aa902d6d1",
												"mock",
												"pstmn",
												"io"
											],
											"path": [
												"auth",
												"register",
												"institutional"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"3\",\n    \"legal_institution_name\": \"PT Jagadraya Jaring Tersebar\",\n    \"phone_number\": \"081318510160\",\n    \"registration_country\": \"ID\"\n}"
								}
							]
						},
						{
							"name": "Sign up OTP",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"password\": \"my_secret_pass\",\n    \"otp_token\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/sign-up-otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"sign-up-otp"
									]
								},
								"description": "In sign up journey, user will be provided with OTP sent to their phone to verify their phone number. After inserting this OTP, user will be automatically logged in without inserting phone number and password again.\n\nHowever, this API still requires phone number and password to be sent alongside the OTP token to prevent security risk. Imagine a following scenario:\n1. User A request an OTP.\n2. Attacker can use the API to input OTP sent to user A and gain access token.\n\nUser must not be asked to input phone number and password again. Thus, it is front end responsibility to save phone_number and password, and then forward it together with otp_token to gain access token.\n\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| phone_number | true | string | +62818151010 | Telephone number |\n| password | true | string | my_secret_pass | SHA256 hashed password. |\n| otp_token | false | string | 658388 | TOTP of the shared secret if OTP is activated |"
							},
							"response": [
								{
									"name": "Sign up OTP Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"password\": \"my_secret_pass\",\n    \"otp_token\": \"123456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/sign-up-otp",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"sign-up-otp"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 900,\n    \"access_token\": \"<access token>\",\n    \"refresh_token\": \"<refresh token>\"\n}"
								},
								{
									"name": "Sign up OTP Error - OTP mismatch",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"password\": \"my_secret_pass\",\n    \"otp_token\": \"123457\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/sign-up-otp",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"sign-up-otp"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"OTP is incorrect. Please try again.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								},
								{
									"name": "Sign up OTP Error - incorrect credentials",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"password\": \"my_leaked_pass\",\n    \"otp_token\": \"123456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/sign-up-otp",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"sign-up-otp"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"User credentials were incorrect.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								}
							]
						},
						{
							"name": "Login without OTP",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone_number\": \"081318510162\",\n    \"password\": \"my_secret_pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login-without-otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login-without-otp"
									]
								},
								"description": "Authenticates the user and requests a pair of access and refresh tokens. Access token expires in 15 minutes. Refresh token expires in 7 days. Tokens should be removed from browser's store on window close or on application close.\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| phone_number | true | string | +62818151010 | Telephone number |\n| password | true | string | my_secret_pass | SHA256 hashed password. |"
							},
							"response": [
								{
									"name": "login without otp success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"password\": \"my_secret_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/login-without-otp",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"login-without-otp"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 900,\n    \"access_token\": \"<access token>\",\n    \"refresh_token\": \"<refresh token>\"\n}"
								},
								{
									"name": "login without otp error - credential incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"password\": \"my_leaked_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/login-without-otp",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"login-without-otp"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"User credentials were incorrect.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								},
								{
									"name": "login without otp error - new IP address",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510162\",\n    \"password\": \"my_secret_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/login-without-otp",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"login-without-otp"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 403,\n    \"error\": {\n        \"message\": \"You are logging in from unknown IP address. Please try to login with OTP to gain access.\"\n    },\n    \"name\": \"OTPRequired\"\n}"
								}
							]
						},
						{
							"name": "Login with OTP",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone_number\": \"081318510161\",\n    \"password\": \"my_secret_pass\",\n    \"otp_token\": \"658388\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login-with-otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login-with-otp"
									]
								},
								"description": "In a case where user can't login without OTP (e.g. because of suspicious IP address), user will be told to login with OTP. To login with with OTP, user must first hit endpoint `auth/request-otp`. After getting OTP, user will submit that OTP alongside his / her credential (phone_number and password).\n\nIf OTP is accepted, this endpoint authenticates the user and requests a pair of access and refresh tokens. Access token expires in 15 minutes. Refresh token expires in 7 days. Tokens should be removed from browser's store on window close.\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| phone_number | true | string | +62818151010 | Telephone number |\n| password | true | string | my_secret_pass | SHA256 hashed password. |\n| otp_token | false | string | 658388 | TOTP of the shared secret if OTP is activated |"
							},
							"response": [
								{
									"name": "login with OTP success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"password\": \"my_secret_pass\",\n    \"otp_token\": \"658388\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://00ebe5df-a91b-4c2f-8e25-963aa902d6d1.mock.pstmn.io/auth/login-with-otp",
											"protocol": "https",
											"host": [
												"00ebe5df-a91b-4c2f-8e25-963aa902d6d1",
												"mock",
												"pstmn",
												"io"
											],
											"path": [
												"auth",
												"login-with-otp"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 900,\n    \"access_token\": \"<access token>\",\n    \"refresh_token\": \"<refresh token>\"\n}"
								},
								{
									"name": "login with OTP error - credential incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510161\",\n    \"password\": \"my_secret_pass\",\n    \"otp_token\": \"658388\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/login-with-otp",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"login-with-otp"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"User credentials were incorrect.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								},
								{
									"name": "login with OTP error - otp incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"password\": \"my_secret_pass\",\n    \"otp_token\": \"658389\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/login-with-otp",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"login-with-otp"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"OTP is incorrect. Please try again.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								}
							]
						},
						{
							"name": "Refresh",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"R3AJzxl81xrIZQSLPODp\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/refresh",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								},
								"description": "Request new access token with refresh token."
							},
							"response": [
								{
									"name": "refresh success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"refresh_token\": \"R3AJzxl81xrIZQSLPODp\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/refresh",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"refresh"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 900,\n    \"access_token\": \"<access token>\",\n    \"refresh_token\": \"<refresh token>\",\n    \"is_otp_activated\": true\n}"
								},
								{
									"name": "refresh error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"refresh_token\": \"R3AJzxl81xrIZQSLPODp123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/refresh",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"refresh"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Refresh token is not valid.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								}
							]
						},
						{
							"name": "Forgot password request",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-body-request",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone_number\": \"081318510160\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/forgot-password",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"forgot-password"
									]
								},
								"description": "Request for reset password link. Link will be sent to the phone number.\n\nWhen phone number is unknown, server will still respond with `200 OK`. This is to prevent malicious user to brute force and gain visibility to registered phone number.\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| phone_number | true | string | +62818151010 | Telephone number |"
							},
							"response": [
								{
									"name": "forgot password request success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/forgot-password",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"forgot-password"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"A link will be sent via SMS to reset your password.\"\n}"
								}
							]
						},
						{
							"name": "Verify reset password request",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reset_id\": \"c3319fc5-f028-4aa3-9644-9cb03825f6af\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/verify-reset-id",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"verify-reset-id"
									]
								},
								"description": "When user clicked on the reset password link sent to their phone, it will open webpage and immediately gets redirected to mobile app.\n\nMobile app needs to verify the `reset_id` to determine three of possible cases:\n\n1.  Link has expired.\n2.  Link is invalid because reset_id is wrong.\n3.  Link is active and ready to use.\n    \n\nThus, here, backend provide api to check the `reset_id`."
							},
							"response": [
								{
									"name": "Verification success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"reset_id\": \"c3319fc5-f028-4aa3-9644-9cb03825f6af\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/verify-reset-id",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"verify-reset-id"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Link is valid.\"\n}"
								},
								{
									"name": "Verification error - reset id incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"reset_id\": \"c3319fc5-f028-4aa3-9644-9cb03825f6ae\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/verify-reset-id",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"verify-reset-id"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Link has incorrect reset_id.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								},
								{
									"name": "Verification error - reset id expired",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"reset_id\": \"c3319fc5-f028-4aa3-9644-9cb03825f6ag\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/verify-reset-id",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"verify-reset-id"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Link has expired.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								}
							]
						},
						{
							"name": "Reset password",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reset_id\": \"c3319fc5-f028-4aa3-9644-9cb03825f6af\",\n    \"new_password\": \"my_new_pass\",\n    \"confirm_password\": \"my_new_pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/reset-password/",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"reset-password",
										""
									]
								},
								"description": "When hitting this API, user must also provide `reset_id`. This reset id is created when user hit `forgot_password_request` api and sent as part of the link sent to the user (via SMS).\n\n`reset_id` ensures link has not expired, and request is made by the rightful owner.\n\nNote: `reset_id` would have been verified through `verify-reset-id` API, but must still be resubmitted here to prevent attack through time difference between verification and reset password submission.\n\n\n#### Parameters\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| reset_id | true | string | c3319fc5-f028-4aa3-9644-9cb03825f6af | UUID for reset process. User got this from the reset link sent via SMS. |\n| new_password | true | string | my_new_pass | New password to save |\n| confirm_password | true | string | my_new_pass | Value of this param must equal to `new_password`. |"
							},
							"response": [
								{
									"name": "reset password success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"reset_id\": \"c3319fc5-f028-4aa3-9644-9cb03825f6af\",\n    \"new_password\": \"my_new_pass\",\n    \"confirm_password\": \"my_new_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/reset-password/",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"reset-password",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Reset password successful.\"\n}"
								},
								{
									"name": "reset password error - wrong reset id",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"reset_id\": \"c3319fc5-f028-4aa3-9644-9cb03825f6ad\",\n    \"new_password\": \"my_new_pass\",\n    \"confirm_password\": \"my_new_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/reset-password/",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"reset-password",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Reset id is not recognized. Please send forget password request again.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								},
								{
									"name": "reset password error - reset id expired",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "x-mock-match-request-body",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"reset_id\": \"c3319fc5-f028-4aa3-9644-9cb03825f6ae\",\n    \"new_password\": \"my_new_pass\",\n    \"confirm_password\": \"my_new_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/reset-password/",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"reset-password",
												""
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 403,\n    \"error\": {\n        \"message\": \"This link has expired. Please send forget password request again.\"\n    },\n    \"name\": \"Forbidden\"\n}"
								}
							]
						},
						{
							"name": "Change password",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"old_password\": \"my_secret_pass\",\n    \"new_password\": \"my_new_super_pass\",\n    \"password_confirmation\": \"my_new_super_pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/change-password",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"change-password"
									]
								},
								"description": "Endpoint for user to change his / her password.\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| phone_number | true | string | +62818151010 | Telephone number |\n| old_password | true | string | my_secret_pass | Old Password |\n| new_password | true | string | my_new_super_pass | New Password |\n| password_confirmation | true | string | my_new_super_pass | Confirmation of New Password |"
							},
							"response": [
								{
									"name": "change password success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"old_password\": \"my_secret_pass\",\n    \"new_password\": \"my_pass\",\n    \"password_confirmation\": \"my_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/change-password",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"change-password"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Password has been updated.\"\n}"
								},
								{
									"name": "change password error - password mismatch",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"old_password\": \"my_wrong_pass\",\n    \"new_password\": \"my_pass\",\n    \"password_confirmation\": \"my_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/change-password",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"change-password"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"The old password does not match with our internal database.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								}
							]
						},
						{
							"name": "Change Phone Number",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"new_phone_number\": \"081318510160\",\n    \"old_phone_number\": \"081318510161\",\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/change-phonenumber",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"change-phonenumber"
									]
								},
								"description": "Endpoint for user to change his / her password.\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| phone_number | true | string | +62818151010 | Telephone number |\n| old_password | true | string | my_secret_pass | Old Password |\n| new_password | true | string | my_new_super_pass | New Password |\n| password_confirmation | true | string | my_new_super_pass | Confirmation of New Password |"
							},
							"response": [
								{
									"name": "change phone number success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"old_password\": \"my_secret_pass\",\n    \"new_password\": \"my_pass\",\n    \"password_confirmation\": \"my_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/change-password",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"change-password"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Password has been updated.\"\n}"
								},
								{
									"name": "change phone number error - OTP error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\",\n    \"old_password\": \"my_wrong_pass\",\n    \"new_password\": \"my_pass\",\n    \"password_confirmation\": \"my_pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/change-password",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"change-password"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 500,\n    \"error\": {\n        \"message\": \"The OTP has failed to send to the new number\"\n    },\n    \"name\": \"InternalServerError\"\n}"
								}
							]
						},
						{
							"name": "Request OTP",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone_number\": \"081318510160\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/request-otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"request-otp"
									]
								},
								"description": "Request an OTP for a specified phone number. Implement rate-limiting API on this endpoint. Maximum 1 time per minute, with total 5 times per 3 hours.\n\nIn response, `request_time` is unix timestamp marking when the OTP request is made. `count` is the number of times OTP has been requested in the past 3 hours. `max_count` is the request limit for 3-hour period.\n\nIf the requested phone number is unknown, server will still return as if phone number is valid. This is to prevent attacker brute forcing our API to gain list of registered user.\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| phone_number | true | string | +62818151010 | Telephone number |"
							},
							"response": [
								{
									"name": "request otp success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510160\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://08207307-bdbb-451a-be2c-156a6730a3da.mock.pstmn.io/auth/request-otp",
											"protocol": "https",
											"host": [
												"08207307-bdbb-451a-be2c-156a6730a3da",
												"mock",
												"pstmn",
												"io"
											],
											"path": [
												"auth",
												"request-otp"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"request_time\": 1655948417,\n    \"count\": 3,\n    \"max_count\": 5,\n    \"message\": \"Token has been sent to requesting phone number.\"\n}"
								},
								{
									"name": "Request OTP Error - rate limited",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone_number\": \"081318510161\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/request-otp",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"request-otp"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 403,\n    \"error\": {\n        \"message\": \"Max OTP request limit exceeded. Please wait before making another request.\"\n    },\n    \"name\": \"Forbidden\"\n}"
								}
							]
						},
						{
							"name": "Challenge OTP",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"otp_token\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/challenge-otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"challenge-otp"
									]
								},
								"description": "#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| otp_token | true | string | 556038 | One time passcode/ 2-Factor Authentication token |"
							},
							"response": [
								{
									"name": "challenge OTP success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"otp_token\": \"123456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/challenge-otp",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"challenge-otp"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"OTP accepted.\"\n}"
								},
								{
									"name": "challenge OTP error - challenge code mismatch",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"otp_token\": \"123457\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth/challenge-otp",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"challenge-otp"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 403,\n    \"error\": {\n        \"message\": \"OTP failed to match.\"\n    },\n    \"name\": \"Forbidden\"\n}"
								}
							]
						},
						{
							"name": "Recover Account",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secret_recovery_phrase\": hashed(\"vending wrinkly treble unfunded elusive taking\")\n}"
								},
								"url": {
									"raw": "{{url}}/auth/account-recovery",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"account-recovery"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Account Recovery",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/auth/account-recovery",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"account-recovery"
									]
								}
							},
							"response": [
								{
									"name": "Get Account Recovery",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/auth/account-recovery",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth",
												"account-recovery"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"secret_recovery_phrase\": \"vending wrinkly treble unfunded elusive taking\"\n}"
								}
							]
						}
					],
					"description": "This endpoint collection host all endpoints related to user authentication.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Profile",
					"item": [
						{
							"name": "Create Profile",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    'company_name': \"PT Ludica Sentosa\",\n    'company_registration_date': \"03/10/1920\", # dd/mm/yyyy\n    'employee_numbers': 30, # integer\n    'annual_sales': 100000000, # rupiah\n    'annual_profit': 1000000, # rupiah\n    'industry_classification': '[36601,36602,36603]',\n    'director_names': '[Satoshi Nakamoto, Zaenadin Zidan]',\n    'commisionaire_names': '[Christiano Ronaldo, Ferguson, Lionel Messi]',\n}"
								},
								"url": {
									"raw": "{{url}}/profile",
									"host": [
										"{{url}}"
									],
									"path": [
										"profile"
									]
								}
							},
							"response": [
								{
									"name": "Create Profile - Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    'company_name': \"PT Ludica Sentosa\",\n    'company_registration_date': \"03/10/1920\", # dd/mm/yyyy\n    'employee_numbers': 30, # integer\n    'annual_sales': 100000000, # rupiah\n    'annual_profit': 1000000, # rupiah\n    'industry_classification': '[36601,36602,36603]',\n    'director_names': '[Satoshi Nakamoto, Zaenadin Zidan]',\n    'commisionaire_names': '[Christiano Ronaldo, Ferguson, Lionel Messi]',\n}"
										},
										"url": {
											"raw": "{{url}}/profile",
											"host": [
												"{{url}}"
											],
											"path": [
												"profile"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								},
								{
									"name": "Create Profile - Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    'company_name': \"PT Ludica Sentosa\",\n    'company_registration_date': \"03/10/1920\", # dd/mm/yyyy\n    'employee_numbers': 30, # integer\n    'annual_sales': 100000000, # rupiah\n    'annual_profit': 1000000, # rupiah\n    'industry_classification': '[36601,36602,36603]',\n    'director_names': '[Satoshi Nakamoto, Zaenadin Zidan]',\n    'commisionaire_names': '[Christiano Ronaldo, Ferguson, Lionel Messi]',\n}"
										},
										"url": {
											"raw": "{{url}}/profile",
											"host": [
												"{{url}}"
											],
											"path": [
												"profile"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Field 'company_name' is missing.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								}
							]
						},
						{
							"name": "Retrieve/Get Profile",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    'company_name': \"PT Ludica Sentosa\",\n    'company_registration_date': \"03/10/1920\", # dd/mm/yyyy\n    'employee_numbers': 30, # integer\n    'annual_sales': 100000000, # rupiah\n    'annual_profit': 1000000, # rupiah\n    'industry_classification': '[36601,36602,36603]',\n    'director_names': '[Satoshi Nakamoto, Zaenadin Zidan]',\n    'commisionaire_names': '[Christiano Ronaldo, Ferguson, Lionel Messi]',\n}"
								},
								"url": {
									"raw": "{{url}}/profile",
									"host": [
										"{{url}}"
									],
									"path": [
										"profile"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve/Get Profile - Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/profile?profile_uuid",
											"host": [
												"{{url}}"
											],
											"path": [
												"profile"
											],
											"query": [
												{
													"key": "profile_uuid",
													"value": null
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								},
								{
									"name": "Retrieve/Get Profile - Error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/profile?profile_uuid",
											"host": [
												"{{url}}"
											],
											"path": [
												"profile"
											],
											"query": [
												{
													"key": "profile_uuid",
													"value": null
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Field 'profile_uuid' is missing.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								}
							]
						},
						{
							"name": "Update Profile",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    'employee_numbers': 70, # integer\n    'annual_sales': 500000000, # rupiah\n}"
								},
								"url": {
									"raw": "{{url}}/profile",
									"host": [
										"{{url}}"
									],
									"path": [
										"profile"
									]
								}
							},
							"response": [
								{
									"name": "Update Profile - Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{url}}/profile?profile_uuid",
											"host": [
												"{{url}}"
											],
											"path": [
												"profile"
											],
											"query": [
												{
													"key": "profile_uuid",
													"value": null
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								},
								{
									"name": "Update Profile - Error",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    'company_name': \"PT Ludica Sentosa\",\n    'company_registration_date': \"03/10/1920\", # dd/mm/yyyy\n}"
										},
										"url": {
											"raw": "{{url}}/profile?profile_uuid",
											"host": [
												"{{url}}"
											],
											"path": [
												"profile"
											],
											"query": [
												{
													"key": "profile_uuid",
													"value": null
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Field 'profile_uuid' is missing.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								}
							]
						},
						{
							"name": "Delete Profile",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    'employee_numbers': 70, # integer\n    'annual_sales': 500000000, # rupiah\n}"
								},
								"url": {
									"raw": "{{url}}/profile",
									"host": [
										"{{url}}"
									],
									"path": [
										"profile"
									]
								}
							},
							"response": [
								{
									"name": "Delete Profile - Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/profile?profile_uuid",
											"host": [
												"{{url}}"
											],
											"path": [
												"profile"
											],
											"query": [
												{
													"key": "profile_uuid",
													"value": null
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"message\": \"profile deletion success\",\n}"
								},
								{
									"name": "Delete Profile - Error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/profile?profile_uuid",
											"host": [
												"{{url}}"
											],
											"path": [
												"profile"
											],
											"query": [
												{
													"key": "profile_uuid",
													"value": null
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Field 'profile_uuid' is missing.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								}
							]
						}
					],
					"description": "These API group handle all data related to user's profile."
				},
				{
					"name": "Wallet",
					"item": [
						{
							"name": "Get balance GIDR",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/wallet/balance",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"balance"
									]
								}
							},
							"response": [
								{
									"name": "Get balance - Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/wallet/balance?network=solana&address=GKvqsuNcnwWqPzzuhLmGi4rzzh55FhJtGizkhHaEJqiV",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"balance"
											],
											"query": [
												{
													"key": "network",
													"value": "solana"
												},
												{
													"key": "address",
													"value": "GKvqsuNcnwWqPzzuhLmGi4rzzh55FhJtGizkhHaEJqiV"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"amount\": 15000000000000,\n    \"ui_amount\": 15000\n}"
								},
								{
									"name": "Get balance - Failed Incorrect Address",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/wallet/balance?network=solana&address=GKvqsuNcnwWqPzzuhLmGi4rzzh55FhJtGizkhHaEJqiV",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"balance"
											],
											"query": [
												{
													"key": "network",
													"value": "solana"
												},
												{
													"key": "address",
													"value": "GKvqsuNcnwWqPzzuhLmGi4rzzh55FhJtGizkhHaEJqiV"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"GIDR balance check unsuccessful due to incorrect address.\"\n    },\n    \"name\": \"ValidationError\"\n}"
								},
								{
									"name": "Get balance - Failed Unsupported Network",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/wallet/balance?network=solana&address=GKvqsuNcnwWqPzzuhLmGi4rzzh55FhJtGizkhHaEJqiV",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"balance"
											],
											"query": [
												{
													"key": "network",
													"value": "solana"
												},
												{
													"key": "address",
													"value": "GKvqsuNcnwWqPzzuhLmGi4rzzh55FhJtGizkhHaEJqiV"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"GIDR balance check unsuccessful due to unsupported network.\"\n    },\n    \"name\": \"ValidationError\"\n}"
								}
							]
						},
						{
							"name": "Transfer GIDR",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"transfer"
									]
								}
							},
							"response": [
								{
									"name": "Transfer GIDR - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/wallet/transfer?to=ACshsLnX77Vu5mR3wqJi3dhQcKm19DqPr2hRHBzZ8esi&amount=500",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"transfer"
											],
											"query": [
												{
													"key": "to",
													"value": "ACshsLnX77Vu5mR3wqJi3dhQcKm19DqPr2hRHBzZ8esi"
												},
												{
													"key": "amount",
													"value": "500"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 9511,\n    \"code\": 111,\n    \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n    \"network\": \"solana\",\n    \"name\": \"transfer\",\n    \"to\": \"ACshsLnX77Vu5mR3wqJi3dhQcKm19DqPr2hRHBzZ8esi\",\n    \"from\": \"3bwgQC9vdCbss3p1a59ZYXtAyDAyBaVVLSN3kjM4kGzY\",\n    \"timestamp\": 1657511255,\n    \"amount\": 500000000000,\n    \"ui_amount\": 500,\n    \"unit\": \"gidr\"\n}"
								},
								{
									"name": "Transfer GIDR - Failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/wallet/transfer",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"transfer"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Transfer GIDR unsuccessful due to not enough gas.\"\n    },\n    \"name\": \"ValidationError\"\n}"
								},
								{
									"name": "Transfer GIDR - Failed Incorrect Address",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/wallet/transfer",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"transfer"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Transfer GIDR unsuccessful due to incorrect address.\"\n    },\n    \"name\": \"ValidationError\"\n}"
								}
							]
						},
						{
							"name": "Transaction history GIDR",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/wallet/history",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"history"
									]
								},
								"description": "User get all list of all transactions inside Garuda Wallet. These transactions include:\n\n1.  Top up\n2.  Redeem\n3.  Stake (to pool)\n4.  Unstake (from pool)\n5.  Pool revenue distribution\n6.  Pool loss socialization\n7.  Send GIDR to another wallet\n8.  Receive GIDR from another wallet\n9.  Incoming cryptocurrency (SOL, USDT, etc)\n10.  Other crypto - GIDR conversion (e.g. SOL to GIDR, USDT to GIDR). This is related to auto conversion feature (if user send supported crypto to this wallet, it will automatically converted into GIDR).\n    \n\nPaging, filtering, and sorting are available for this API.\n\n#### Transaction Codes\n\n| Code | Category | Description |\n| --- | --- | --- |\n| 101 | Top up | via cash. |\n| 111 | Top up | via bank transfer. |\n| 112 | Top up | via bank virtual account. |\n| 181 | Top up | Incoming other cryptocurrency (SOL, USDT, etc). |\n| 191 | Top up | Conversion from other cyptocurrency to GIDR. |\n| 201 | Redeem | GIDR redemption to cash. |\n| 211 | Redeem | GIDR redemption to bank account. |\n| 301 | Staking | Stake to pool. |\n| 311 | Unstaking | Unstake from pool. |\n| 401 | Revenue (distribution) | User get portion of revenue sharing from pool. |\n| 411 | Revenue (loss socialization) | User stake in a pool is slashed due to pool's loss. |\n| 501 | Transfer (in) | Receive GIDR from another wallet. |\n| 511 | Transfer (out) | Transfer out, send GIDR to another wallet. |\n\n\n#### Extras\nEvery transaction object will have `extra` property. Extra property is different between transaction codes. For example, for `111 bank transfer`, `extra` will contain:\n\n```json\n\"extra\": {\n  \"source\": \"bank transfer\",\n  \"source_account\": \"2441880809\",\n  \"source_bank\": \"BCA\",\n  \"transaction_reference\": \"18975465164\", \n  \"timestamp\": 1657511155\n}\n```\n\nbut for `301 staking`, `extra` will contain:\n```json\n\"extra\": {\n  \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\", \n  \"timestamp\": 1657511155\n}\n```"
							},
							"response": [
								{
									"name": "Transaction history - Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/wallet/history",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"history"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"page\": 1,\n    \"last_page\": 2,\n    \"total_hits\": 20,\n    \"result\": [\n        {\n            \"id\": 9511,\n            \"code\": 111,\n            \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"top up\",\n            \"timestamp\": 1657511255,\n            \"amount\": 500000000000,\n            \"ui_amount\": 500,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"source\": \"bank transfer\",\n                \"source_account\": \"2441880809\",\n                \"source_bank\": \"BCA\",\n                \"transaction_reference\": \"18975465164\",\n                \"timestamp\": 1657511155\n            }\n        },\n        {\n            \"id\": 9512,\n            \"code\": 112,\n            \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"top up\",\n            \"timestamp\": 1657511255,\n            \"amount\": 350000000000,\n            \"ui_amount\": 350,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"source\": \"virtual account\",\n                \"source_account\": \"018777081318510160\",\n                \"source_bank\": \"BCA\",\n                \"transaction_reference\": \"18975465164\",\n                \"timestamp\": 1657511155\n            }\n        },\n        {\n            \"id\": 9513,\n            \"code\": 211,\n            \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"redeem\",\n            \"timestamp\": 1657511155,\n            \"amount\": 750000000000,\n            \"ui_amount\": 750,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"dest_account\" :\"24419892563\",\n                \"dest_bank\": \"BCA\",\n                \"transaction_reference\": \"18975465164\",\n                \"timestamp\":1657511155\n            }\n        },\n        {\n            \"id\": 9514,\n            \"code\": 301,\n            \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"staking\",\n            \"timestamp\": 1657511155,\n            \"amount\": 1000000000000,\n            \"ui_amount\": 1000,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n                \"timestamp\": 1657511155\n            }\n        },\n        {\n            \"id\": 9515,\n            \"code\": 311,\n            \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"unstaking\",\n            \"timestamp\": 1657511155,\n            \"amount\": 250000000000,\n            \"ui_amount\": 250,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n                \"timestamp\": 1657511155\n            }\n        },\n        {\n            \"id\": 9516,\n            \"code\": 401,\n            \"blockchain_tx_id\":\"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"revenue distribution\",\n            \"timestamp\": 1657511155,\n            \"amount\": 15000000000,\n            \"ui_amount\": 15,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n                \"return_bps\": 20\n            }\n        },\n        {\n            \"id\": 9517,\n            \"code\": 411,\n            \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"loss socialization\",\n            \"timestamp\": 1657511155,\n            \"amount\": 10000000000,\n            \"ui_amount\": 10,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"pool_uuid\": \"087b1171-d74a-4aa4-b121-1d5f37c0b14d\",\n                \"return_bps\": -20\n            }\n        },\n        {\n            \"id\": 9518,\n            \"code\": 501,\n            \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"transfer in\",\n            \"timestamp\": 1657511155,\n            \"amount\": 500000000000,\n            \"ui_amount\": 500,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"from\": \"9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5\",\n                \"to\": \"2wY1UbwmS2ZqdiJbst74K1XJmCQGhoU2wyV6jGTuvAka\"\n            }\n        },\n        {\n            \"id\": 9519,\n            \"code\": 511,\n            \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"transfer out\",\n            \"timestamp\": 1657511155,\n            \"amount\": 25000000000,\n            \"ui_amount\": 25,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"from\": \"2wY1UbwmS2ZqdiJbst74K1XJmCQGhoU2wyV6jGTuvAka\",\n                \"to\": \"9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5\"\n            }\n        }\n    ]\n}"
								},
								{
									"name": "Transaction history - Success Copy",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/wallet/history/?page=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"history",
												""
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"page\": 2,\n    \"last_page\": 2,\n    \"total_hits\": 20,\n    \"result\": [\n        {\n            \"id\": 9511,\n            \"code\": 111,\n            \"tx_signature\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"top up\",\n            \"timestamp\": 1657511255,\n            \"amount\": 500000000000,\n            \"ui_amount\": 500,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"source\": \"bank transfer\",\n                \"source_account\": \"2441880809\",\n                \"source_bank\": \"BCA\",\n                \"transaction_reference\": \"18975465164\",\n                \"timestamp\": 1657511155\n            }\n        },\n        {\n            \"id\": 9512,\n            \"code\": 112,\n            \"tx_signature\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"top up\",\n            \"timestamp\": 1657511255,\n            \"amount\": 350000000000,\n            \"ui_amount\": 350,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"source\": \"virtual account\",\n                \"source_account\": \"018777081318510160\",\n                \"source_bank\": \"BCA\",\n                \"transaction_reference\": \"18975465164\",\n                \"timestamp\": 1657511155\n            }\n        },\n        {\n            \"id\": 9513,\n            \"code\": 211,\n            \"tx_signature\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"redeem\",\n            \"timestamp\": 1657511155,\n            \"amount\": 750000000000,\n            \"ui_amount\": 750,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"dest_account\" :\"24419892563\",\n                \"dest_bank\": \"BCA\",\n                \"transaction_reference\": \"18975465164\",\n                \"timestamp\":1657511155\n            }\n        },\n        {\n            \"id\": 9514,\n            \"code\": 301,\n            \"tx_signature\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"staking\",\n            \"timestamp\": 1657511155,\n            \"amount\": 1000000000000,\n            \"ui_amount\": 1000,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n                \"timestamp\": 1657511155\n            }\n        },\n        {\n            \"id\": 9515,\n            \"code\": 311,\n            \"tx_signature\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"unstaking\",\n            \"timestamp\": 1657511155,\n            \"amount\": 250000000000,\n            \"ui_amount\": 250,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n                \"timestamp\": 1657511155\n            }\n        },\n        {\n            \"id\": 9516,\n            \"code\": 401,\n            \"tx_signature\":\"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"revenue distribution\",\n            \"timestamp\": 1657511155,\n            \"amount\": 15000000000,\n            \"ui_amount\": 15,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n                \"return_bps\": 20\n            }\n        },\n        {\n            \"id\": 9517,\n            \"code\": 411,\n            \"tx_signature\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"loss socialization\",\n            \"timestamp\": 1657511155,\n            \"amount\": 10000000000,\n            \"ui_amount\": 10,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"pool_uuid\": \"087b1171-d74a-4aa4-b121-1d5f37c0b14d\",\n                \"return_bps\": -20\n            }\n        },\n        {\n            \"id\": 9518,\n            \"code\": 501,\n            \"tx_signature\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"transfer in\",\n            \"timestamp\": 1657511155,\n            \"amount\": 500000000000,\n            \"ui_amount\": 500,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"from\": \"9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5\",\n                \"to\": \"2wY1UbwmS2ZqdiJbst74K1XJmCQGhoU2wyV6jGTuvAka\"\n            }\n        },\n        {\n            \"id\": 9519,\n            \"code\": 511,\n            \"tx_signature\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n            \"network\": \"solana\",\n            \"name\": \"transfer out\",\n            \"timestamp\": 1657511155,\n            \"amount\": 25000000000,\n            \"ui_amount\": 25,\n            \"unit\": \"gidr\",\n            \"extra\": {\n                \"from\": \"2wY1UbwmS2ZqdiJbst74K1XJmCQGhoU2wyV6jGTuvAka\",\n                \"to\": \"9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5\"\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Transaction detail GIDR",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/wallet/transaction?id=915",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"transaction"
									],
									"query": [
										{
											"key": "id",
											"value": "915"
										}
									]
								}
							},
							"response": [
								{
									"name": "Transaction detail - Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/wallet/transaction?id=9515",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"transaction"
											],
											"query": [
												{
													"key": "id",
													"value": "9515"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 9515,\n    \"code\": 311,\n    \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n    \"network\": \"solana\",\n    \"name\": \"unstaking\",\n    \"timestamp\": 1657511155,\n    \"amount\": 250000000000,\n    \"ui_amount\": 250,\n    \"unit\": \"gidr\",\n    \"extra\": {\n        \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n        \"timestamp\": 1657511155\n    }\n}"
								},
								{
									"name": "Transaction detail - Error - not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/wallet/transaction?id=9510",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"transaction"
											],
											"query": [
												{
													"key": "id",
													"value": "9510"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 404,\n    \"error\": {\n        \"message\": \"Transaction id 9510 not found.\"\n    },\n    \"name\": \"NotFoundError\"\n}"
								}
							]
						},
						{
							"name": "Topup GIDR from IDR",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ui_amount\": 1500\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/wallet/topup",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"topup"
									]
								},
								"description": "This endpoint is used to redeem GIDR back to IDR, to the customer's bank account. Customer bank account should be defined in his/her profile, otherwise it will return an error.\n\n\n#### Parameters\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| ui_amount | true | number | 1000 | Total amount of GIDR to redeem. |"
							},
							"response": [
								{
									"name": "Topup GIDR from IDR - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ui_amount\": 1000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/wallet/topup",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"topup"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 5619,\n    \"asset\": \"gidr\",\n    \"amount\": 1000000000000,\n    \"ui_amount\": 1000,\n    \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n    \"wallet\": \"2wY1UbwmS2ZqdiJbst74K1XJmCQGhoU2wyV6jGTuvAka\",\n    \"destination_bank\": \"BCA\",\n    \"destination_name\": \"Bob\",\n    \"destination_account\": \"2441880809\",\n    \"status\": \"SUCCESS\",\n    \"timestamp\": 1657586877 \n}"
								},
								{
									"name": "Topup GIDR from IDR  - Error - insufficient fund",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ui_amount\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/wallet/topup",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"topup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Insufficient fund.\"\n    },\n    \"name\": \"NotEnoughBalance\"\n}"
								},
								{
									"name": "Topup GIDR from IDR  - Error - no bank detail",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ui_amount\": 1500\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/wallet/topup",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"topup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Bank detail undefined.\"\n    },\n    \"name\": \"ValidationError\"\n}"
								}
							]
						},
						{
							"name": "Redeem GIDR to IDR",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ui_amount\": 1500\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/wallet/redeem",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"redeem"
									]
								},
								"description": "This endpoint is used to redeem GIDR back to IDR, to the customer's bank account. Customer bank account should be defined in his/her profile, otherwise it will return an error.\n\n\n#### Parameters\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| ui_amount | true | number | 1000 | Total amount of GIDR to redeem. |"
							},
							"response": [
								{
									"name": "Redeem GIDR to IDR - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ui_amount\": 1000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/wallet/redeem",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"redeem"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 5619,\n    \"asset\": \"gidr\",\n    \"amount\": 1000000000000,\n    \"ui_amount\": 1000,\n    \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n    \"wallet\": \"2wY1UbwmS2ZqdiJbst74K1XJmCQGhoU2wyV6jGTuvAka\",\n    \"destination_bank\": \"BCA\",\n    \"destination_name\": \"Bob\",\n    \"destination_account\": \"2441880809\",\n    \"status\": \"SUCCESS\",\n    \"timestamp\": 1657586877 \n}"
								},
								{
									"name": "Redeem GIDR to IDR - Error - insufficient fund",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ui_amount\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/wallet/redeem",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"redeem"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Insufficient fund.\"\n    },\n    \"name\": \"NotEnoughBalance\"\n}"
								},
								{
									"name": "Redeem GIDR to IDR - Error - no bank detail",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ui_amount\": 1500\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/wallet/redeem",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"redeem"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Bank detail undefined.\"\n    },\n    \"name\": \"ValidationError\"\n}"
								}
							]
						},
						{
							"name": "Convert GIDR from Crypto",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ui_amount\": 1500\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/wallet/convert?asset=btc&network_id=btc",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"convert"
									],
									"query": [
										{
											"key": "asset",
											"value": "btc"
										},
										{
											"key": "network_id",
											"value": "btc"
										}
									]
								},
								"description": "This endpoint is used to redeem GIDR back to IDR, to the customer's bank account. Customer bank account should be defined in his/her profile, otherwise it will return an error.\n\n\n#### Parameters\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| ui_amount | true | number | 1000 | Total amount of GIDR to redeem. |"
							},
							"response": [
								{
									"name": "Convert GIDR from Crypto - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ui_amount\": 1000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/wallet/convert?asset=btc&network_id=btc",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"convert"
											],
											"query": [
												{
													"key": "asset",
													"value": "btc"
												},
												{
													"key": "network_id",
													"value": "btc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 5619,\n    \"asset\": \"gidr\",\n    \"amount\": 1000000000000,\n    \"ui_amount\": 1000,\n    \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n    \"wallet\": \"2wY1UbwmS2ZqdiJbst74K1XJmCQGhoU2wyV6jGTuvAka\",\n    \"destination_bank\": \"BCA\",\n    \"destination_name\": \"Bob\",\n    \"destination_account\": \"2441880809\",\n    \"status\": \"SUCCESS\",\n    \"timestamp\": 1657586877 \n}"
								},
								{
									"name": "Convert GIDR from Crypto - Error - insufficient fund",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/wallet/convert?asset=btc&network_id=btc",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"convert"
											],
											"query": [
												{
													"key": "asset",
													"value": "btc"
												},
												{
													"key": "network_id",
													"value": "btc"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Insufficient fund.\"\n    },\n    \"name\": \"NotEnoughBalance\"\n}"
								}
							]
						},
						{
							"name": "Convert GIDR to Crypto",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ui_amount\": 1500\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/wallet/convert?asset=btc&network_id&address&amount&notes",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"convert"
									],
									"query": [
										{
											"key": "asset",
											"value": "btc"
										},
										{
											"key": "network_id",
											"value": null
										},
										{
											"key": "address",
											"value": null
										},
										{
											"key": "amount",
											"value": null
										},
										{
											"key": "notes",
											"value": null
										}
									]
								},
								"description": "This endpoint is used to redeem GIDR back to IDR, to the customer's bank account. Customer bank account should be defined in his/her profile, otherwise it will return an error.\n\n\n#### Parameters\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| ui_amount | true | number | 1000 | Total amount of GIDR to redeem. |"
							},
							"response": [
								{
									"name": "Convert GIDR from Crypto - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ui_amount\": 1000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/wallet/convert?from=btc&network_id=btc&address&amount&notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"convert"
											],
											"query": [
												{
													"key": "from",
													"value": "btc"
												},
												{
													"key": "network_id",
													"value": "btc"
												},
												{
													"key": "address",
													"value": null
												},
												{
													"key": "amount",
													"value": null
												},
												{
													"key": "notes",
													"value": null
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 5619,\n    \"asset\": \"gidr\",\n    \"amount\": 1000000000000,\n    \"ui_amount\": 1000,\n    \"blockchain_tx_id\": \"3ND4x7mAvjBLw6yQBpvWYozmerh9qPzuRnUueGTy2Ff6LEwNKxptDCXawhA4oR5G5Fb52QyurM1WjQWmVbNm6u7v\",\n    \"wallet\": \"2wY1UbwmS2ZqdiJbst74K1XJmCQGhoU2wyV6jGTuvAka\",\n    \"destination_bank\": \"BCA\",\n    \"destination_name\": \"Bob\",\n    \"destination_account\": \"2441880809\",\n    \"status\": \"SUCCESS\",\n    \"timestamp\": 1657586877 \n}"
								},
								{
									"name": "Convert GIDR from Crypto - Error - insufficient fund",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ui_amount\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/wallet/redeem",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"redeem"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Insufficient fund.\"\n    },\n    \"name\": \"NotEnoughBalance\"\n}"
								}
							]
						},
						{
							"name": "Get supported currencies",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/wallet/supported-currencies",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"supported-currencies"
									]
								},
								"description": "When user wants to top up from other cryptocurrencies, first user needs to pull a list of supported currencies.\n\nWe support most popular ones, but not all. This feature doesn't provide blanket-support of every cryptocurrency.\n\nThis endpoint returns a json. The key is the supported currency, the value is the conversion value before transaction fee."
							},
							"response": [
								{
									"name": "Get supported currencies - Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/wallet/supported-currencies",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"supported-currencies"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "[\n    {\n      \"asset\": \"btc\",\n      \"btc_equivalent\": \"1\",\n      \"icon_url\": \"https://storage.bitwyre.com/assets/btc.png\",\n      \"is_deposit_enabled\": true,\n      \"is_trading_enabled\": true,\n      \"is_withdraw_enabled\": true,\n      \"local_equivalent\": \"\",\n      \"local_reference\": \"\",\n      \"max_withdrawal\": \"10\",\n      \"min_withdrawal\": \"0.001\",\n      \"name\": \"Bitcoin\",\n      \"precision\": \"1e-8\",\n      \"withdrawal_fee\": \"0.00000001\"\n    },\n    {\n      \"asset\": \"eth\",\n      \"btc_equivalent\": \"\",\n      \"icon_url\": \"https://storage.bitwyre.com/public/images/coins/raster/ETH_500px.png\",\n      \"is_deposit_enabled\": true,\n      \"is_trading_enabled\": true,\n      \"is_withdraw_enabled\": true,\n      \"local_equivalent\": \"\",\n      \"local_reference\": \"\",\n      \"max_withdrawal\": \"10\",\n      \"min_withdrawal\": \"0.001\",\n      \"name\": \"Ethereum\",\n      \"precision\": \"1e-9\",\n      \"withdrawal_fee\": \"0.00000001\"\n    },\n    {\n      \"asset\": \"xmr\",\n      \"btc_equivalent\": \"\",\n      \"icon_url\": \"https://storage.bitwyre.com/public/images/coins/raster/XMR_500px.png\",\n      \"is_deposit_enabled\": true,\n      \"is_trading_enabled\": true,\n      \"is_withdraw_enabled\": true,\n      \"local_equivalent\": \"\",\n      \"local_reference\": \"\",\n      \"max_withdrawal\": \"10\",\n      \"min_withdrawal\": \"0.001\",\n      \"name\": \"Monero\",\n      \"precision\": \"1e-12\",\n      \"withdrawal_fee\": \"0.00000001\"\n    },\n    {\n      \"asset\": \"zec\",\n      \"btc_equivalent\": \"\",\n      \"icon_url\": \"https://storage.bitwyre.com/public/images/coins/raster/ZEC_500px.png\",\n      \"is_deposit_enabled\": true,\n      \"is_trading_enabled\": true,\n      \"is_withdraw_enabled\": true,\n      \"local_equivalent\": \"\",\n      \"local_reference\": \"\",\n      \"max_withdrawal\": \"10\",\n      \"min_withdrawal\": \"0.001\",\n      \"name\": \"ZCash\",\n      \"precision\": \"1e-8\",\n      \"withdrawal_fee\": \"0.00000001\"\n    },\n    {\n      \"asset\": \"usdt\",\n      \"btc_equivalent\": \"\",\n      \"icon_url\": \"https://storage.bitwyre.com/assets/usdt.png\",\n      \"is_deposit_enabled\": true,\n      \"is_trading_enabled\": true,\n      \"is_withdraw_enabled\": true,\n      \"local_equivalent\": \"\",\n      \"local_reference\": \"\",\n      \"max_withdrawal\": \"\",\n      \"min_withdrawal\": \"20000\",\n      \"name\": \"USD Tether Stablecoin\",\n      \"precision\": \"1e-6\",\n      \"withdrawal_fee\": \"10000\"\n    },\n    {\n      \"asset\": \"idr\",\n      \"btc_equivalent\": \"\",\n      \"icon_url\": \"https://storage.bitwyre.com/public/images/coins/raster/IDR.png\",\n      \"is_deposit_enabled\": true,\n      \"is_trading_enabled\": true,\n      \"is_withdraw_enabled\": true,\n      \"local_equivalent\": \"\",\n      \"local_reference\": \"\",\n      \"max_withdrawal\": \"100000000\",\n      \"min_withdrawal\": \"100000\",\n      \"name\": \"Indonesian Rupiah\",\n      \"precision\": \"1\",\n      \"withdrawal_fee\": \"0\"\n    },\n    {\n      \"asset\": \"usd\",\n      \"btc_equivalent\": \"\",\n      \"icon_url\": \"https://storage.bitwyre.com/assets/usd.png\",\n      \"is_deposit_enabled\": true,\n      \"is_trading_enabled\": true,\n      \"is_withdraw_enabled\": true,\n      \"local_equivalent\": \"\",\n      \"local_reference\": \"\",\n      \"max_withdrawal\": \"\",\n      \"min_withdrawal\": \"20000\",\n      \"name\": \"United States Dollar\",\n      \"precision\": \"1e-2\",\n      \"withdrawal_fee\": \"10000\"\n    },\n    {\n      \"asset\": \"brl\",\n      \"btc_equivalent\": \"\",\n      \"icon_url\": \"https://storage.bitwyre.com/public/images/fiats/raster/brl.png\",\n      \"is_deposit_enabled\": true,\n      \"is_trading_enabled\": true,\n      \"is_withdraw_enabled\": true,\n      \"local_equivalent\": \"\",\n      \"local_reference\": \"\",\n      \"max_withdrawal\": \"\",\n      \"min_withdrawal\": \"20000\",\n      \"name\": \"Brazilian Real\",\n      \"precision\": \"1e-2\",\n      \"withdrawal_fee\": \"10000\"\n    },\n    {\n      \"asset\": \"mxn\",\n      \"btc_equivalent\": \"\",\n      \"icon_url\": \"https://storage.bitwyre.com/public/images/fiats/raster/mxn.png\",\n      \"is_deposit_enabled\": true,\n      \"is_trading_enabled\": true,\n      \"is_withdraw_enabled\": true,\n      \"local_equivalent\": \"\",\n      \"local_reference\": \"\",\n      \"max_withdrawal\": \"\",\n      \"min_withdrawal\": \"20000\",\n      \"name\": \"Mexican Peso\",\n      \"precision\": \"1e-2\",\n      \"withdrawal_fee\": \"10000\"\n    }\n  ]"
								}
							]
						},
						{
							"name": "Get crypto address",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/wallet/crypto-address?currency=xlm",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"crypto-address"
									],
									"query": [
										{
											"key": "currency",
											"value": "xlm"
										}
									]
								}
							},
							"response": [
								{
									"name": "Get crypto address - Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/wallet/get-address?currency=xlm",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"get-address"
											],
											"query": [
												{
													"key": "currency",
													"value": "xlm"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"address\": \"GDRL4HRBJDRHDIJCKX6FB5UNB4KAQINZAJR7L6R3UFKM45BT5KKJ7NCI\",\n    \"address_tag\": \"3267106239\",\n    \"address_tag_name\": \"Memo\",\n    \"network\": \"xlm\"\n}\n    "
								},
								{
									"name": "Get crypto address - Success Copy",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/wallet/get-address?currency=sol",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"get-address"
											],
											"query": [
												{
													"key": "currency",
													"value": "sol"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"address\": \"8GmHzaNXivwa66AutXbDPNoQoTwniBHLFPSZ18mDWWHy\",\n    \"address_tag\": \"3267106239\",\n    \"address_tag_name\": \"Memo\",\n    \"network\": \"sol\"\n}"
								},
								{
									"name": "Get crypto address - Failed Network Timed Out",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/wallet/get-address?currency=sol",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"get-address"
											],
											"query": [
												{
													"key": "currency",
													"value": "sol"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 500,\n    \"error\": {\n        \"message\": \"Blockchain RPC Timed out.\"\n    },\n    \"name\": \"InternalServerError\"\n}"
								}
							]
						},
						{
							"name": "Get virtual account",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/wallet/va",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"va"
									]
								},
								"description": "This endpoint get virtual account number for requesting user.\n\nEach user will have their own virtual account number to transfer fiat money."
							},
							"response": [
								{
									"name": "Get virtual account - Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/wallet/get-va",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"get-va"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"va_number\": \"08887081808253023\",\n    \"bank\": \"BCA\"\n}"
								},
								{
									"name": "Get virtual account - Failed",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/wallet/get-va",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"get-va"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 500,\n    \"error\": {\n        \"message\": \"Virtual account backend timed out.\"\n    },\n    \"name\": \"InternalServerError\"\n}"
								}
							]
						},
						{
							"name": "Get banking detail",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/profile/banking",
									"host": [
										"{{url}}"
									],
									"path": [
										"profile",
										"banking"
									]
								}
							},
							"response": [
								{
									"name": "Get banking detail - Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/profile/banking",
											"host": [
												"{{url}}"
											],
											"path": [
												"profile",
												"banking"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1,\n    \"bank_name\": \"BCA\",\n    \"bank_account\": \"2440209899\",\n    \"bank_account_name\": \"Elbert Ludica Toha\",\n    \"swift_code\": \"123456\",\n    \"address\": \"23 Embarcadero Road, California, USA\",\n    \"details\": \"routing code XXXXX\",\n    \"account_nickname\": \"Elbert Toha\",\n    \"asset\": \"idr\"\n}"
								}
							]
						},
						{
							"name": "Set banking detail",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bank_name\": \"BCA\",\n    \"bank_account\": \"2440209899\",\n    \"bank_account_name\": \"Elbert Ludica Toha\",\n    \"swift_code\": \"123456\",\n    \"address\": \"23 Embarcadero Road, California, USA\",\n    \"details\": \"routing code XXXXX\",\n    \"account_nickname\": \"Elbert Toha\",\n    \"asset\": \"idr\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/profile/banking",
									"host": [
										"{{url}}"
									],
									"path": [
										"profile",
										"banking"
									]
								}
							},
							"response": [
								{
									"name": "Set banking detail - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bank_name\": \"BCA\",\n    \"bank_account\": \"2440209899\",\n    \"bank_account_name\": \"Elbert Ludica Toha\",\n    \"swift_code\": \"123456\",\n    \"address\": \"23 Embarcadero Road, California, USA\",\n    \"details\": \"routing code XXXXX\",\n    \"account_nickname\": \"Elbert Toha\",\n    \"asset\": \"idr\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/profile/banking",
											"host": [
												"{{url}}"
											],
											"path": [
												"profile",
												"banking"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1,\n    \"bank_name\": \"BCA\",\n    \"bank_account\": \"2440209899\",\n    \"bank_account_name\": \"Elbert Ludica Toha\",\n    \"swift_code\": \"123456\",\n    \"address\": \"23 Embarcadero Road, California, USA\",\n    \"details\": \"routing code XXXXX\",\n    \"account_nickname\": \"Elbert Toha\",\n    \"asset\": \"idr\"\n}"
								},
								{
									"name": "Set banking detail - Error - incomplete data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bank_name\": \"BCA\",\n    \"bank_account_name\": \"Elbert Ludica Toha\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/profile/banking",
											"host": [
												"{{url}}"
											],
											"path": [
												"profile",
												"banking"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Field 'bank_account' is missing.\"\n    },\n    \"name\": \"BadRequest\"\n}"
								}
							]
						},
						{
							"name": "Get Whitelist Address for Crypto Asset",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/wallet/whitelist-address?asset=btc&network_id=btc",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"whitelist-address"
									],
									"query": [
										{
											"key": "asset",
											"value": "btc"
										},
										{
											"key": "network_id",
											"value": "btc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add/Whitelist Address",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/wallet/whitelist-address?asset=btc&network_id=btc&address",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"whitelist-address"
									],
									"query": [
										{
											"key": "asset",
											"value": "btc"
										},
										{
											"key": "network_id",
											"value": "btc"
										},
										{
											"key": "address",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "This group of API endpoints will host all APIs relating to user wallet."
				},
				{
					"name": "Pools",
					"item": [
						{
							"name": "List of pools",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/pools?search",
									"host": [
										"{{url}}"
									],
									"path": [
										"pools"
									],
									"query": [
										{
											"key": "search",
											"value": null
										}
									]
								},
								"description": "Get list of pools for the user. There are two types of pool:\n1. Public pool\n2. Private pool\n\nUser will automatically get public pool and private pool they are invited to."
							},
							"response": [
								{
									"name": "List of pools - Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/pools?search",
											"host": [
												"{{url}}"
											],
											"path": [
												"pools"
											],
											"query": [
												{
													"key": "search",
													"value": null
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"page\": 1,\n    \"last_page\": 1,\n    \"total_hits\": 2,\n    \"result\": [\n        {\n            \"uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n            \"name\": \"mmi\",\n            \"display\": \"Money Market Instrument\",\n            \"description\": \"This pool fund is invested into Indonesian Money Market Instrument such as bank deposit and government bonds. This pool has minimal risk.\",\n            \"type\": 0,\n            \"risk_class\": 2,\n            \"risk_description\": \"This pool has minimal risk because bank deposits are guarantee by state insurance (LPS). For government bonds, Indonesia has BBB+ rating. All risk exposure will be tightly correlated with Indonesian Economy.\",\n            \"expected_annual_return\": 500,\n            \"invitation_only\": false,\n            \"program_id\": \"2rXhwHQYKY3WWBPKu7FfnM6R1MhhmexMpmb7ArMxw57P\",\n            \"publish_status\": \"DRAFT\"\n        },\n        {\n            \"uuid\": \"087b1171-d74a-4aa4-b121-1d5f37c0b14d\",\n            \"publish_status\": \"DRAFT\",\n            \"name\": \"kfund\",\n            \"display\": \"Kimchi Fund\",\n            \"description\": \"The fund in this pool will be used for bitcoin arbitrage in Korea. This leverage price difference between BTC in Korea and the rest of the world due to Korea's strict capital outflow policy.\",\n            \"type\": 0,\n            \"risk_class\": 8,\n            \"risk_description\": \"This pool is risky. Primary risk comes from operation stategy we employed. Fund might stuck in Korea without a way get out.\",\n            \"expected_annual_return\": 50000,\n            \"invitation_only\": true,\n            \"program_id\": \"6ZzZPUQg2Dik4bHZi8xRxcFcLjXAAh1zVUhEojVKpCK5\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get staking status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/pool/2f391549-d3e0-4d39-9245-515c0d99c4fb/staking",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"2f391549-d3e0-4d39-9245-515c0d99c4fb",
										"staking"
									]
								},
								"description": "Get staking status of requesting user in specific pool. Pool is defined as part of the URL endpoint.\n\nThis endpoint only returns the current amount of cToken user has in associated pool. It doesn't tell user principal amount, yield generated, or anything like that because the calculation is too complex  for it to be effectively displayed as summary.\n\nHistorical return as a result of staking will be provided via separate API, which will return a list of returns by date (distribution date, weighted avg. amount, yield amount, yield percentage)."
							},
							"response": [
								{
									"name": "Get staking status - Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/pool/2f391549-d3e0-4d39-9245-515c0d99c4fb/staking",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"2f391549-d3e0-4d39-9245-515c0d99c4fb",
												"staking"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"amount\": 103000000000000,\n    \"ui_amount\": 103000\n}"
								},
								{
									"name": "Get staking status - Success - Empty",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/pool/087b1171-d74a-4aa4-b121-1d5f37c0b14d/staking",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"087b1171-d74a-4aa4-b121-1d5f37c0b14d",
												"staking"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Get staking status - Error - pool not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/pool/621e5954-2ad6-46c1-ab47-7c8e1e8d0f50/staking",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"621e5954-2ad6-46c1-ab47-7c8e1e8d0f50",
												"staking"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 404,\n    \"error\": {\n        \"message\": \"Pool with uuid (621e5954-2ad6-46c1-ab47-7c8e1e8d0f50) doesn't exists.\"\n    },\n    \"name\": \"NotFoundError\"\n}"
								}
							]
						},
						{
							"name": "Stake",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"amount\": 2250000000000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/pool/stake",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"stake"
									]
								},
								"description": "Stake (User's) GIDR into pool, in return, user will receive pool's coin (cToken).\n\nNote that the amount sent to server is the GIDR amount + 9 decimals. This is because GIDR token use the standard decimals from Solana.\n\nIf user want to stake 1 GIDR, request amount is 1000000000 (nine zeros).\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| pool_uuid | true | string | 2f391549-d3e0-4d39-9245-515c0d99c4fb | Pool UUID to stake to |\n| amount | true | number | 2250000000000 | Amount to stake, complete with 9 decimals |"
							},
							"response": [
								{
									"name": "Stake - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"amount\": 2250000000000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/stake",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"stake"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"wallet\": \"9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5\",\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"amount\": 2250000000000\n}"
								},
								{
									"name": "Stake - Error - Insufficient fund",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"amount\": 25000000000000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/stake",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"stake"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Insufficient funds.\"\n    },\n    \"name\": \"NotEnoughBalance\"\n}"
								}
							]
						},
						{
							"name": "Request unstake",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"amount\": 400000000000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/pool/unstake",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"unstake"
									]
								},
								"description": "Request to unstake GIDR from pool. This request can be:\n1. Automatically approved when pool has the liquidity. This is done through a watcher program.\n2. Manually approved by admin. This only applies to special case.\n\nNote that the amount sent to server is the GIDR amount + 9 decimals. This is because GIDR token use the standard decimals from Solana.\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| pool_uuid | true | string | 2f391549-d3e0-4d39-9245-515c0d99c4fb | Pool UUID to stake to |\n| amount | true | number | 2250000000000 | Amount to stake, complete with 9 decimals |"
							},
							"response": [
								{
									"name": "Request Unstake - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"amount\": 400000000000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/unstake",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"unstake"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"queue_uuid\": \"de044268-6e84-4f09-b626-2c885e03379f\",\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"wallet\": \"9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5\",\n    \"amount\": 400000000000\n}"
								},
								{
									"name": "Request Unstake - Error - insufficient fund",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"amount\": 2500000000000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/unstake",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"unstake"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Insufficient fund.\"\n    },\n    \"name\": \"NotEnoughBalance\"\n}"
								}
							]
						},
						{
							"name": "Get my unstake requests",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/pool/unstake/my",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"unstake",
										"my"
									]
								},
								"description": "This API lists down all the unstake request queues for the user who makes the request.\n\n\n#### Status Enums\n| Value | Description |\n| --- | --- |\n| PENDING | Request has been submitted, but pending approval / rejection from the system. |\n| APPROVED | Request has been approved. Token has been exchanged. |\n| REJECTED | Request has been denied. No transaction is done. |"
							},
							"response": [
								{
									"name": "Get My Unstake Requests - Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/pool/unstake/my",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"unstake",
												"my"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"page\": 1,\n    \"last_page\": 1,\n    \"total_hits\": 2,\n    \"result\": [\n        {\n            \"id\": 2,\n            \"pool_id\": 2,\n            \"profile_id\": 1,\n            \"queue_uuid\": \"0267fc64-5d10-4951-b627-f1695cc56c6d\",\n            \"amount\": \"250000000000\",\n            \"decision_date\": null,\n            \"status\": \"PENDING\",\n            \"created_at\": \"2022-06-29T04:17:58.000Z\",\n            \"updated_at\": \"2022-06-29T04:17:58.000Z\"\n        },\n        {\n            \"id\": 1,\n            \"pool_id\": 1,\n            \"profile_id\": 1,\n            \"queue_uuid\": \"e7a271e2-7fab-4c98-a371-609f96aa22ef\",\n            \"amount\": \"400000000000\",\n            \"decision_date\": \"2022-06-29T07:20:41.731Z\",\n            \"status\": \"APPROVED\",\n            \"created_at\": \"2022-06-29T04:17:39.000Z\",\n            \"updated_at\": \"2022-06-29T07:20:42.000Z\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get pool detail",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/pool/2f391549-d3e0-4d39-9245-515c0d99c4fb",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"2f391549-d3e0-4d39-9245-515c0d99c4fb"
									]
								},
								"description": "Get detail of a specific pool. Specify `pool_uuid` as URL endpoint.\n\nNote than all returns are in basis point (bps).\n\n_1% = 100 basis point._"
							},
							"response": [
								{
									"name": "Get pool detail - Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/pool/2f391549-d3e0-4d39-9245-515c0d99c4fb",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"2f391549-d3e0-4d39-9245-515c0d99c4fb"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"name\": \"mmi\",\n    \"display\": \"Money Market Instrument\",\n    \"description\": \"This pool fund is invested into Indonesian Money Market Instrument such as bank deposit and government bonds. This pool has minimal risk.\",\n    \"type\": 0,\n    \"risk_class\": 2,\n    \"risk_description\": \"This pool has minimal risk because bank deposits are guarantee by state insurance (LPS). For government bonds, Indonesia has BBB+ rating. All risk exposure will be tightly correlated with Indonesian Economy.\",\n    \"expected_annual_return\": 500,\n    \"invitation_only\": false,\n    \"program_id\": \"2rXhwHQYKY3WWBPKu7FfnM6R1MhhmexMpmb7ArMxw57P\",\n    \"publish_status\": \"DRAFT\",\n    \"pool_size\": 100000,\n    \"total_liquidity\": 10000,\n    \"total_disbursement\": 90000,\n    \"total_stakers\": 95,\n    \"avg_returns\": {\n        \"1m\": 125,\n        \"3m\": 250,\n        \"6m\": 500,\n        \"12m\": 1000\n    }\n}"
								},
								{
									"name": "Get pool detail - Error - incorrect uuid",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/pool/2f391549-d3e0-4d39-9245-515c0d99c4aa",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"2f391549-d3e0-4d39-9245-515c0d99c4aa"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 404,\n    \"error\": {\n        \"message\": \"Pool with uuid (2f391549-d3e0-4d39-9245-515c0d99c4aa) doesn't exists.\"\n    },\n    \"name\": \"NotFoundError\"\n}"
								}
							]
						},
						{
							"name": "Graph",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/pools/graph?pool_uuid&to&from",
									"host": [
										"{{url}}"
									],
									"path": [
										"pools",
										"graph"
									],
									"query": [
										{
											"key": "pool_uuid",
											"value": null
										},
										{
											"key": "to",
											"value": null
										},
										{
											"key": "from",
											"value": null
										}
									]
								}
							},
							"response": [
								{
									"name": "Graph",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/pools/graph?pool_uuid&to&from",
											"host": [
												"{{url}}"
											],
											"path": [
												"pools",
												"graph"
											],
											"query": [
												{
													"key": "pool_uuid",
													"value": null
												},
												{
													"key": "to",
													"value": null
												},
												{
													"key": "from",
													"value": null
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "[\n    [1626236213, 1000],\n    [1626236215, 1001],\n    [1626236220, 1003],\n    [1626236225, 1010],\n    [1626236227, 1011],\n]"
								}
							]
						},
						{
							"name": "Disbursement List",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/pools/disbursement-list?pool_uuid",
									"host": [
										"{{url}}"
									],
									"path": [
										"pools",
										"disbursement-list"
									],
									"query": [
										{
											"key": "pool_uuid",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Investment Summary",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/pools/investment-summary?pool_uuid",
									"host": [
										"{{url}}"
									],
									"path": [
										"pools",
										"investment-summary"
									],
									"query": [
										{
											"key": "pool_uuid",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get TVL",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/pools/tvl",
									"host": [
										"{{url}}"
									],
									"path": [
										"pools",
										"tvl"
									]
								}
							},
							"response": [
								{
									"name": "Get TVL",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/pools/tvl",
											"host": [
												"{{url}}"
											],
											"path": [
												"pools",
												"tvl"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"tvl\": 10000,\n    \"profit\": 10,\n}"
								}
							]
						}
					]
				}
			],
			"description": "This APIs are accessible by all Jagad's user as part of the service."
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Pools",
					"item": [
						{
							"name": "Approve unstake request",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"queue_uuid\": \"de044268-6e84-4f09-b626-2c885e03379f\",\n    \"action\": \"approve\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/pool/unstake/request",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"unstake",
										"request"
									]
								},
								"description": "Approve or reject unstake request. If request is approved, exchange of cToken and GIDR will happen.\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| pool_uuid | true | string | 1837dd24-0d7a-4ddc-af9a-9384f5807915 | Pool's uuid |\n| queue_uuid | true | string | cff2765a-8216-499c-9387-49ddd8f361a5 | Queue uuid |\n| action | true | string | approve / reject | String to pick action |\n\n\n#### Action\n| Value | Description |\n| --- | --- |\n| approve | Approve the request. |\n| reject | Reject the request. |"
							},
							"response": [
								{
									"name": "Approve unstake request - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"queue_uuid\": \"de044268-6e84-4f09-b626-2c885e03379f\",\n    \"action\": \"approve\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/unstake/request",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"unstake",
												"request"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"queue_uuid\": \"de044268-6e84-4f09-b626-2c885e03379f\",\n    \"user_wallet\": \"9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5\",\n    \"amount\": 400000000000,\n    \"status\": \"approved\",\n    \"date_created\": 1656143188611,\n    \"date_decision\": 1656209689233\n}"
								},
								{
									"name": "Approve unstake request - Error - wrong queue id",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"queue_uuid\": \"de044268-6e84-4f09-b626-2c885e03379d\",\n    \"action\": \"approve\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/unstake/request",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"unstake",
												"request"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 404,\n    \"error\": {\n        \"message\": \"Failed to get queue.\"\n    },\n    \"name\": \"NotFoundError\"\n}"
								},
								{
									"name": "Approve unstake request - Error - insufficient fund",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"queue_uuid\": \"de044268-6e84-4f09-b626-2c885e03379e\",\n    \"action\": \"approve\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/unstake/request",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"unstake",
												"request"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"User does not have enough balance.\"\n    },\n    \"name\": \"NotEnoughBalance\"\n}"
								}
							]
						},
						{
							"name": "Create pool",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"mmi\",\n    \"display\": \"Money Market Instrument\",\n    \"description\": \"This pool fund is invested into Indonesian Money Market Instrument such as bank deposit and government bonds. This pool has minimal risk.\",\n    \"type\": 0,\n    \"risk_class\": 2,\n    \"risk_description\": \"This pool has minimal risk because bank deposits are guarantee by state insurance (LPS). For government bonds, Indonesia has BBB+ rating. All risk exposure will be tightly correlated with Indonesian Economy.\",\n    \"expected_annual_return\": 500,\n    \"is_private\": false,\n    \"program_id\": \"2rXhwHQYKY3WWBPKu7FfnM6R1MhhmexMpmb7ArMxw57P\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/pool/setup",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"setup"
									]
								}
							},
							"response": [
								{
									"name": "Create pool - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"mmi\",\n    \"display\": \"Money Market Instrument\",\n    \"description\": \"This pool fund is invested into Indonesian Money Market Instrument such as bank deposit and government bonds. This pool has minimal risk.\",\n    \"type\": 0,\n    \"risk_class\": 2,\n    \"risk_description\": \"This pool has minimal risk because bank deposits are guarantee by state insurance (LPS). For government bonds, Indonesia has BBB+ rating. All risk exposure will be tightly correlated with Indonesian Economy.\",\n    \"expected_annual_return\": 500,\n    \"is_private\": false,\n    \"program_id\": \"2rXhwHQYKY3WWBPKu7FfnM6R1MhhmexMpmb7ArMxw57P\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/setup",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"setup"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1,\n    \"pool_uuid\": \"b402a691-b50f-4442-91ef-8db5da58db4f\",\n    \"program_id\": \"2rXhwHQYKY3WWBPKu7FfnM6R1MhhmexMpmb7ArMxw57P\",\n    \"name\": \"mmi\",\n    \"display\": \"Money Market Instrument\",\n    \"type\": 0,\n    \"description\": \"This pool fund is invested into Indonesian Money Market Instrument such as bank deposit and government bonds. This pool has minimal risk.\",\n    \"risk_class\": 2,\n    \"risk_description\": \"This pool has minimal risk because bank deposits are guarantee by state insurance (LPS). For government bonds, Indonesia has BBB+ rating. All risk exposure will be tightly correlated with Indonesian Economy.\",\n    \"expected_annual_return\": 500,\n    \"is_private\": false,\n    \"publish_status\": \"DRAFT\",\n    \"created_at\": \"2022-08-03T14:42:00.000Z\",\n    \"updated_at\": \"2022-08-03T14:42:00.000Z\"\n}"
								},
								{
									"name": "Create pool - Error - program not dep",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"mmi\",\n    \"display\": \"Money Market Instrument\",\n    \"description\": \"This pool fund is invested into Indonesian Money Market Instrument such as bank deposit and government bonds. This pool has minimal risk.\",\n    \"type\": 0,\n    \"risk_class\": 2,\n    \"risk_description\": \"This pool has minimal risk because bank deposits are guarantee by state insurance (LPS). For government bonds, Indonesia has BBB+ rating. All risk exposure will be tightly correlated with Indonesian Economy.\",\n    \"expected_annual_return\": 500,\n    \"is_private\": false,\n    \"program_id\": \"2rXhwHQYKY3WWBPKu7FfnM6R1MhhmexMpmb7ArMxw57F\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/setup",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"setup"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Program is not deployed\"\n    },\n    \"name\": \"ValidationError\"\n}"
								},
								{
									"name": "Create pool - Error - duplicate name",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"kfund\",\n    \"display\": \"Money Market Instrument\",\n    \"description\": \"This pool fund is invested into Indonesian Money Market Instrument such as bank deposit and government bonds. This pool has minimal risk.\",\n    \"type\": 0,\n    \"risk_class\": 2,\n    \"risk_description\": \"This pool has minimal risk because bank deposits are guarantee by state insurance (LPS). For government bonds, Indonesia has BBB+ rating. All risk exposure will be tightly correlated with Indonesian Economy.\",\n    \"expected_annual_return\": 500,\n    \"is_private\": false,\n    \"program_id\": \"2rXhwHQYKY3WWBPKu7FfnM6R1MhhmexMpmb7ArMxw57P\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/setup",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"setup"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Pool kfund already exists.\"\n    },\n    \"name\": \"ValidationError\"\n}"
								}
							]
						},
						{
							"name": "Update pool",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"display\": \"Money Market Instrument For Real\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/pool/2f391549-d3e0-4d39-9245-515c0d99c4fb",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"2f391549-d3e0-4d39-9245-515c0d99c4fb"
									]
								}
							},
							"response": [
								{
									"name": "Update pool - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/2f391549-d3e0-4d39-9245-515c0d99c4fb",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"2f391549-d3e0-4d39-9245-515c0d99c4fb"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1,\n    \"pool_uuid\": \"b402a691-b50f-4442-91ef-8db5da58db4f\",\n    \"program_id\": \"2rXhwHQYKY3WWBPKu7FfnM6R1MhhmexMpmb7ArMxw57P\",\n    \"name\": \"mmi\",\n    \"display\": \"Money Market Instrument For Real\",\n    \"type\": 0,\n    \"description\": \"This pool fund is invested into Indonesian Money Market Instrument such as bank deposit and government bonds. This pool has minimal risk.\",\n    \"risk_class\": 2,\n    \"risk_description\": \"This pool has minimal risk because bank deposits are guarantee by state insurance (LPS). For government bonds, Indonesia has BBB+ rating. All risk exposure will be tightly correlated with Indonesian Economy.\",\n    \"expected_annual_return\": 500,\n    \"is_private\": false,\n    \"publish_status\": \"DRAFT\",\n    \"created_at\": \"2022-08-03T14:42:00.000Z\",\n    \"updated_at\": \"2022-08-03T14:42:00.000Z\"\n}"
								},
								{
									"name": "Update pool - Error - not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/2f391549-d3e0-4d39-9245-515c0d99c4fa",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"2f391549-d3e0-4d39-9245-515c0d99c4fa"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 404,\n    \"error\": {\n        \"message\": \"Pool is not found.\"\n    },\n    \"name\": \"NotFoundError\"\n}"
								}
							]
						},
						{
							"name": "Delete pool",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/pool/2f391549-d3e0-4d39-9245-515c0d99c4fb",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"2f391549-d3e0-4d39-9245-515c0d99c4fb"
									]
								}
							},
							"response": [
								{
									"name": "Delete pool - Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/pool/2f391549-d3e0-4d39-9245-515c0d99c4fb",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"2f391549-d3e0-4d39-9245-515c0d99c4fb"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								},
								{
									"name": "Delete pool - Error - not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/pool/2f391549-d3e0-4d39-9245-515c0d99c4fb",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"2f391549-d3e0-4d39-9245-515c0d99c4fb"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 404,\n    \"error\": {\n        \"message\": \"Pool is not found.\"\n    },\n    \"name\": \"NotFoundError\"\n}"
								}
							]
						},
						{
							"name": "Disburse",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"wallet\": \"8GmHzaNXivwa66AutXbDPNoQoTwniBHLFPSZ18mDWWHy\",\n    \"amount\": 2050000000000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/pool/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"disburse"
									]
								},
								"description": "Disburse pool's GIDR to a wallet. Wallet holder could be:\n\n1.  Asset management, in the context of MMI.\n2.  Scholarship receiver, in the context of scholarship pool.\n    \n\nThis is usually used in pool without governance, thus, disbursement is done  \nby Jagad's admin.\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| pool_uuid | true | string | 10ec89be-ee28-45b6-996f-074f4cc653a4 | Pool's UUID |\n| wallet | true | string | 9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5 | Wallet address to receive fund |\n| amount | true | number | 2050000000000 | Amount of GIDR to disbursed with full 9 decimals |\n\n\n#### Errors\n_invalid wallet_\nWallet could be invalid due to several reasons:\n1. Wallet has invalid address\n2. Wallet is not registered\n3. Wallet doesn't have the right role for the pool."
							},
							"response": [
								{
									"name": "Disburse - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"wallet\": \"8GmHzaNXivwa66AutXbDPNoQoTwniBHLFPSZ18mDWWHy\",\n    \"amount\": 2050000000000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/disburse",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"disburse"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"wallet\": \"9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5\",\n    \"amount\": 2050000000000,\n    \"network\": \"solana\"\n}"
								},
								{
									"name": "Disburse - Error - pool has inssuficient fund",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"wallet\": \"8GmHzaNXivwa66AutXbDPNoQoTwniBHLFPSZ18mDWWHy\",\n    \"amount\": 225000000000000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/disburse",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"disburse"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Insufficient funds.\"\n    },\n    \"name\": \"NotEnoughBalance\"\n}"
								},
								{
									"name": "Disburse - Error - incorrect role",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"wallet\": \"9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5\",\n    \"amount\": 2050000000000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/disburse",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"disburse"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Wallet 9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5 must be registered as 'investee' in mmi pool, otherwise it cannot receive fund.\"\n    },\n    \"name\": \"PoolIncorrectRole\"\n}"
								},
								{
									"name": "Disburse - Error - user not registered",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"wallet\": \"9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm6\",\n    \"amount\": 2050000000000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/disburse",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"disburse"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Wallet 9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm6 is not registered. Please check again.\"\n    },\n    \"name\": \"NotRegistered\"\n}"
								}
							]
						},
						{
							"name": "Revenue sharing - stage",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"start\": \"2022-08-01\",\n    \"end\": \"2022-08-31\",\n    \"amount\": 1000000000000,\n    \"direction\": \"INFLOW\"\n}"
								},
								"url": {
									"raw": "{{url}}/pool/revenue/stage",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"revenue",
										"stage"
									]
								},
								"description": "This endpoint create a revenue sharing record in our database, but do not commit. The backend simply calculate.\n\nThis gives admin a chance to see the calculation result before committing the revenue distribution.\n\nThis API returns _commit_id_, which in turn can be used to retrieve the detail about this revenue sharing, such as total, list of users and their portion, status, etc.\n\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| pool_uuid | true | string | 2f391549-d3e0-4d39-9245-515c0d99c4fb | Pool's uuid |\n| start | true | string | \"2022-08-01\" | YYYY-MM-DD string for date. |\n| end | true | string | \"2022-08-31 | YYYY-MM-DD string for date. |\n| amount | false | number | 1000000000 | amount with full decimal. If `ui_amount` is not provided, this field is mandatory |\n| ui_amount | false | number | 1000 | Amount in UI friendly format. This field is mandatory if `amount` is not provided. |\n\n`amount` and `ui_amount` cannot co-exists.\n\n\n#### Errors\nUpon receiving this error:\n```\n{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"End date cannot be more than today.\",\n        \"detail\": {\n            \"end\": \"2022-08-31\"\n        }\n    },\n    \"name\": \"ValidationError\"\n}\n```\n\nThe detail contain a suggested date, either an `end` date or a `start` date.\n\nIf `end` date is in the future, the system will suggest today's date.\n\nIf `start` date overlap with previous revenue sharing, the system will suggest, the next date (d + 1) of the previous revenue sharing."
							},
							"response": [
								{
									"name": "Revenue sharing - stage - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"start\": \"2022-08-01\",\n    \"end\": \"2022-08-31\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/revenue/stage",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"revenue",
												"stage"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1,\n    \"uuid\": \"4a4c3180-e790-425c-adc0-f56a5239c267\",\n    \"pool_id\": 1,\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"direction\": \"INFLOW\",\n    \"amount\": 100000000000,\n    \"ui_amount\": 100,\n    \"start\": 20220801,\n    \"end\": 20220831,\n    \"timestamp\": 1659414392,\n    \"status\": \"STAGED\"\n}"
								},
								{
									"name": "Revenue sharing - stage - Error - invalid start period",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"start\": \"2022-07-25\",\n    \"end\": \"2022-08-31\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/revenue/stage",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"revenue",
												"stage"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"Start date cannot overlap with previous revenue sharing period.\",\n        \"detail\": {\n            \"start\": \"2022-08-01\"\n        }\n    },\n    \"name\": \"ValidationError\"\n}"
								},
								{
									"name": "Revenue sharing - stage - Error - invalid end period",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"start\": \"2022-08-01\",\n    \"end\": \"2022-09-01\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/revenue/stage",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"revenue",
												"stage"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 400,\n    \"error\": {\n        \"message\": \"End date cannot be more than today.\",\n        \"detail\": {\n            \"end\": \"2022-08-31\"\n        }\n    },\n    \"name\": \"ValidationError\"\n}"
								}
							]
						},
						{
							"name": "Revenue sharing - list",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/pool/revenues",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"revenues"
									]
								},
								"description": "This endpoint return a list of all registered revenue sharing, `STAGED` and `COMMITTED`. Filtering, sorting, paging, applies as usual.\n\nUser will only get their associated pool where he / she is the manager of said pool. Cannot cross pool."
							},
							"response": [
								{
									"name": "Revenue sharing - list - Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/pool/revenue/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"revenue",
												"list"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"page\": 1,\n    \"last_page\": 10,\n    \"total_hits\": 250,\n    \"result\": [\n        {\n            \"id\": 1,\n            \"uuid\": \"4a4c3180-e790-425c-adc0-f56a5239c267\",\n            \"pool_id\": 1,\n            \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n            \"direction\": \"INFLOW\",\n            \"amount\": 100000000000,\n            \"ui_amount\": 100,\n            \"start\": 20220801,\n            \"end\": 20220831,\n            \"timestamp\": 1659414392,\n            \"status\": \"STAGED\"\n        },\n        {\n            \"id\": 2,\n            \"uuid\": \"4a4c3180-e790-425c-adc0-f56a5239c262\",\n            \"pool_id\": 1,\n            \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n            \"direction\": \"INFLOW\",\n            \"amount\": 100000000000,\n            \"ui_amount\": 100,\n            \"start\": 20220801,\n            \"end\": 20220831,\n            \"timestamp\": 1659414392,\n            \"status\": \"COMMITTED\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Revenue sharing  - detail",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/pool/revenue/4a4c3180-e790-425c-adc0-f56a5239c266",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"revenue",
										"4a4c3180-e790-425c-adc0-f56a5239c266"
									]
								},
								"description": "This API returns detail about revenue sharing, identified with its UUID.\n\n\n#### Endpoint\n`/pool/revenue/<rev_share_uuid>`"
							},
							"response": [
								{
									"name": "Revenue sharing  - detail - Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-mock-match-request-body",
												"value": "true",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/pool/revenue/4a4c3180-e790-425c-adc0-f56a5239c267",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"revenue",
												"4a4c3180-e790-425c-adc0-f56a5239c267"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1,\n    \"uuid\": \"4a4c3180-e790-425c-adc0-f56a5239c267\",\n    \"pool_id\": 1,\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"direction\": \"INFLOW\",\n    \"amount\": 100000000000,\n    \"ui_amount\": 100,\n    \"start\": 20220801,\n    \"end\": 20220831,\n    \"timestamp\": 1659414392,\n    \"status\": \"STAGED\"\n}"
								},
								{
									"name": "Revenue sharing  - detail - Error - not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-mock-match-request-body",
												"value": "true",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/pool/revenue/4a4c3180-e790-425c-adc0-f56a5239c268",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"revenue",
												"4a4c3180-e790-425c-adc0-f56a5239c268"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 404,\n    \"error\": {\n        \"message\": \"Revenue sharing is not found.\"\n    },\n    \"name\": \"NotFoundError\"\n}"
								}
							]
						},
						{
							"name": "Revenue Sharing - receivers",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/pool/revenue/4a4c3180-e790-425c-adc0-f56a5239c267/receivers",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"revenue",
										"4a4c3180-e790-425c-adc0-f56a5239c267",
										"receivers"
									]
								},
								"description": "This endpoint lists all receivers that are bound to receive the revenue share when committed.\n\nThis endpoint is used to double check the list of receivers before admin commit the revenue share.\n\n\n#### Endpoint\n`/pool/revenue/<rev_share_uuid>/receivers`"
							},
							"response": [
								{
									"name": "Revenue Sharing - receivers - Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "x-mock-match-request-body",
												"value": "true",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/pool/revenue/4a4c3180-e790-425c-adc0-f56a5239c267/receivers",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"revenue",
												"4a4c3180-e790-425c-adc0-f56a5239c267",
												"receivers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"page\": 1,\n    \"last_page\": 10,\n    \"total_hits\": 250,\n    \"result\": [\n        {\n            \"profile\": {\n                \"id\": 1,\n                \"phone_number\": \"081113560178\",\n                \"wallet\": \"9RSXWuo2fvGLU85SsK5YJsNuDhm9VBdKf4mZqHDMMAm5\"\n            },\n            \"pool_uuid\": \"4a4c3180-e790-425c-adc0-f56a5239c267\",\n            \"direction\": \"INFLOW\",\n            \"amount\": 600000000000,\n            \"ui_amount\": 600,\n            \"created_at\": 1657511155\n        },\n        {\n            \"profile\": {\n                \"id\": 2,\n                \"phone_number\": \"08151369878\",\n                \"wallet\": \"2wY1UbwmS2ZqdiJbst74K1XJmCQGhoU2wyV6jGTuvAka\"\n            },\n            \"pool_uuid\": \"4a4c3180-e790-425c-adc0-f56a5239c267\",\n            \"direction\": \"INFLOW\",\n            \"amount\": 400000000000,\n            \"ui_amount\": 400,\n            \"created_at\": 1657511155\n        }\n    ]\n}"
								},
								{
									"name": "Revenue Sharing - receivers - empty",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "x-mock-match-request-body",
												"value": "true",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/pool/revenue/4a4c3180-e790-425c-adc0-f56a5239c266/receivers",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"revenue",
												"4a4c3180-e790-425c-adc0-f56a5239c266",
												"receivers"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"page\": 1,\n    \"last_page\": 1,\n    \"total_hits\": 0,\n    \"result\": [\n      \n    ]\n}"
								},
								{
									"name": "Revenue Sharing - receivers - Error - UUID not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "x-mock-match-request-body",
												"value": "true",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/pool/revenue/4a4c3180-e790-425c-adc0-f56a5239c268/receivers",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"revenue",
												"4a4c3180-e790-425c-adc0-f56a5239c268",
												"receivers"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 404,\n    \"error\": {\n        \"message\": \"Revenue sharing uuid is not found.\"\n    },\n    \"name\": \"NotFoundError\"\n}"
								}
							]
						},
						{
							"name": "Revenue sharing - commit",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <access_token>",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-mock-match-request-body",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uuid\": \"4a4c3180-e790-425c-adc0-f56a5239c268\",\n    \"pool_uuid\": \"207d9f96-57b3-4bbf-90f1-d6feaae88739\"\n}"
								},
								"url": {
									"raw": "{{url}}/pool/revenue/commit",
									"host": [
										"{{url}}"
									],
									"path": [
										"pool",
										"revenue",
										"commit"
									]
								},
								"description": "When committing, backend will check for several things:\n1. Period is valid\n2. Pool has the cToken to distribute\n3. Garuda has the GIDR to distribute\n\nThis API commit staged revenue share. This means it will execute transaction and distribute pool's cToken. Any failure to distribute will then be saved to another database for manual reconciliation.\n\n#### Parameters\n\n| Parameter | Required | Type | Value | Description |\n| --- | --- | --- | --- | --- |\n| commit uuid | true | string | 4a4c3180-e790-425c-adc0-f56a5239c267 | Commit's uuid. You get this when staging the revenue sharing. |"
							},
							"response": [
								{
									"name": "Revenue sharing - commit - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"uuid\": \"4a4c3180-e790-425c-adc0-f56a5239c267\",\n    \"pool_uuid\": \"207d9f96-57b3-4bbf-90f1-d6feaae88739\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/revenue/commit",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"revenue",
												"commit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1,\n    \"uuid\": \"4a4c3180-e790-425c-adc0-f56a5239c267\",\n    \"pool_id\": 1,\n    \"pool_uuid\": \"2f391549-d3e0-4d39-9245-515c0d99c4fb\",\n    \"direction\": \"INFLOW\",\n    \"amount\": 100000000000,\n    \"ui_amount\": 100,\n    \"start\": 20220801,\n    \"end\": 20220831,\n    \"timestamp\": 1659414392,\n    \"committed_at\": 1659414393,\n    \"status\": \"COMMITED\"\n}"
								},
								{
									"name": "Revenue sharing - commit - Error - not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <access_token>",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"uuid\": \"4a4c3180-e790-425c-adc0-f56a5239c268\",\n    \"pool_uuid\": \"207d9f96-57b3-4bbf-90f1-d6feaae88739\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/pool/revenue/commit",
											"host": [
												"{{url}}"
											],
											"path": [
												"pool",
												"revenue",
												"commit"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"statusCode\": 404,\n    \"error\": {\n        \"message\": \"Revenue sharing uuid is not found.\"\n    },\n    \"name\": \"NotFoundError\"\n}"
								}
							]
						}
					]
				}
			],
			"description": "These APIs are only accessible by Jagad's admin team and watchers."
		},
		{
			"name": "Programmatic",
			"item": [
				{
					"name": "Convert - Callback",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/wallet/convert/callback",
							"host": [
								"{{url}}"
							],
							"path": [
								"wallet",
								"convert",
								"callback"
							]
						}
					},
					"response": []
				},
				{
					"name": "Webhook - Virtual Account Callback",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "ApiKey <api_key_access>",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/wallet/va-in?provider=stripe",
							"host": [
								"{{url}}"
							],
							"path": [
								"wallet",
								"va-in"
							],
							"query": [
								{
									"key": "provider",
									"value": "stripe"
								}
							]
						},
						"description": "This endpoint is to be called when there's money incoming in the virtual account.\n\nRequest body follow the provider. For example, Stripe will have different format compared to other providers.\n\nBackend handler must be able to handle supported provider.\n\nThis endpoint transfer GIDR to the associated user. If called successfully, will return `204 No Content`."
					},
					"response": [
						{
							"name": "Webhook - va transfer in - Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "ApiKey <api_key_access>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/wallet/va-in?provider=stripe",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"va-in"
									],
									"query": [
										{
											"key": "provider",
											"value": "stripe"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const api_key = pm.environment.get(\"api_key\");",
					"pm.request.headers.add({ key: 'x-api-key', value: api_key });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}